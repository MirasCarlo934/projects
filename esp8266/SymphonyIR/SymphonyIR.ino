/**
 * This is the firmware for a socket controller.
 * Relay should be connected to the pin defined in switchPin.
 * Relay should be wired as Normally Closed.
 */
#include <mainhtml.h>
#include <MqttUtil.h>
#include <SpiffsUtil.h>
#include <SymphonyCore.h>
#include <SymphonyProduct.h>

#include "Arduino.h"
#include "SymphonyCore.h"

#include <IRremoteESP8266.h>
#include <IRsend.h>

Symphony s = Symphony();
SymphProduct product = SymphProduct();

enum propertyIndex : uint8_t {
	TurnOn = 1,	//digital
	TurnOff = 2, //digital
	AutoOn = 3,	//digital
	AutoOff = 4,	//digital
};

#define IRLEDPin 13  // ESP8266 GPIO pin to use.
IRsend irsend(IRLEDPin);  // Set the GPIO to be used to sending the message.
uint16_t rawDataOff[447] = {170, 24778,  3562, 1666,  472, 396,  470, 1264,  470, 394,  470, 396,  470, 396,  470, 396,  470, 396,  470, 396,  470, 396,  470, 396,  524, 370,  470, 396,  470, 396,  470, 1262,  472, 396,  470, 396,  470, 396,  470, 396,  470, 394,  472, 394,  470, 396,  470, 1260,  472, 1262,  472, 1262,  470, 396,  524, 370,  470, 1262,  470, 396,  470, 396,  472, 394,  470, 396,  470, 396,  472, 394,  470, 396,  470, 396,  470, 396,  470, 396,  470, 396,  470, 396,  470, 396,  522, 370,  470, 396,  470, 394,  470, 396,  470, 396,  470, 396,  470, 396,  470, 396,  470, 396,  470, 396,  470, 396,  470, 396,  470, 396,  470, 396,  498, 396,  470, 396,  470, 396,  470, 1262,  470, 1262,  472, 396,  470, 396,  470, 396,  470, 396,  470, 396,  470, 9958,  3586, 1642,  470, 396,  494, 1240,  522, 372,  470, 394,  496, 372,  470, 394,  472, 394,  470, 396,  494, 370,  470, 396,  482, 384,  470, 396,  470, 396,  470, 1262,  470, 396,  470, 394,  498, 394,  470, 396,  470, 396,  470, 394,  470, 396,  470, 1262,  612, 1120,  470, 1262,  472, 396,  470, 396,  470, 1262,  470, 396,  470, 396,  470, 394,  470, 396,  470, 396,  498, 396,  470, 396,  470, 396,  470, 396,  470, 396,  470, 396,  470, 396,  470, 396,  470, 396,  470, 396,  470, 394,  470, 1262,  470, 1262,  470, 1262,  470, 396,  498, 396,  470, 396,  470, 396,  470, 1262,  470, 396,  470, 1262,  470, 1264,  470, 396,  470, 396,  470, 396,  470, 396,  470, 396,  470, 396,  470, 396,  470, 396,  498, 396,  470, 1262,  470, 1262,  470, 1262,  470, 1262,  470, 1262,  470, 1264,  470, 1260,  472, 396,  470, 396,  496, 1236,  496, 370,  496, 1238,  496, 1238,  494, 370,  496, 370,  496, 370,  524, 370,  496, 370,  496, 370,  496, 370,  496, 370,  496, 370,  496, 370,  496, 370,  496, 370,  496, 364,  502, 1238,  496, 1236,  498, 1236,  496, 370,  498, 368,  524, 370,  496, 370,  496, 370,  496, 370,  496, 370,  496, 368,  498, 370,  496, 1236,  496, 1236,  496, 1236,  496, 370,  498, 368,  496, 370,  496, 370,  496, 370,  524, 370,  496, 368,  498, 368,  496, 368,  498, 370,  496, 370,  496, 368,  496, 370,  498, 368,  496, 370,  498, 368,  496, 1236,  496, 370,  498, 368,  524, 1236,  498, 370,  496, 370,  496, 368,  498, 1236,  496, 370,  498, 368,  496, 370,  496, 370,  496, 370,  496, 370,  500, 366,  496, 370,  496, 370,  496, 370,  524, 370,  496, 370,  496, 372,  496, 368,  496, 370,  496, 370,  496, 1236,  496, 370,  496, 1236,  496, 370,  496, 1236,  496, 1236,  496, 370,  496, 1236,  496, 35046,  118, 27582,  80, 94,  98};  // UNKNOWN 4FCE8BCF
//On
uint16_t rawDataOn[443] = {78, 9802,  3564, 1664,  502, 364,  502, 1230,  502, 364,  502, 364,  502, 364,  502, 364,  502, 362,  504, 362,  502, 364,  502, 364,  528, 364,  502, 364,  502, 364,  502, 1230,  504, 362,  502, 364,  526, 340,  502, 364,  502, 364,  502, 364,  502, 364,  502, 1230,  504, 1230,  502, 1230,  502, 364,  530, 362,  502, 1232,  502, 364,  502, 364,  502, 364,  502, 364,  502, 364,  502, 364,  502, 364,  502, 364,  502, 364,  502, 364,  502, 364,  502, 364,  502, 364,  530, 364,  502, 364,  502, 364,  502, 364,  502, 364,  502, 364,  502, 364,  502, 362,  502, 364,  502, 362,  502, 364,  502, 364,  502, 364,  502, 364,  530, 364,  502, 364,  502, 364,  502, 1228,  504, 1230,  504, 364,  502, 362,  504, 364,  502, 364,  502, 362,  528, 9900,  3594, 1636,  504, 362,  504, 1230,  530, 364,  502, 364,  502, 364,  502, 364,  502, 364,  502, 364,  502, 364,  502, 366,  496, 366,  560, 308,  502, 362,  502, 1230,  502, 364,  504, 362,  530, 364,  502, 364,  502, 364,  502, 364,  502, 364,  502, 1230,  504, 1230,  504, 1230,  504, 364,  502, 364,  502, 1230,  502, 364,  502, 364,  502, 364,  502, 364,  502, 364,  530, 364,  502, 362,  502, 364,  502, 362,  502, 364,  502, 364,  502, 362,  502, 364,  502, 1230,  502, 364,  528, 340,  502, 1230,  502, 1230,  504, 1228,  502, 364,  530, 362,  504, 364,  502, 364,  502, 1230,  502, 364,  502, 1230,  502, 1230,  502, 364,  502, 364,  502, 364,  502, 364,  502, 364,  502, 362,  504, 364,  502, 364,  530, 364,  502, 1230,  502, 1230,  502, 1230,  502, 1230,  504, 1230,  502, 1230,  502, 1230,  502, 364,  502, 364,  502, 1230,  502, 364,  502, 1230,  504, 1230,  502, 364,  502, 364,  502, 364,  528, 364,  502, 364,  502, 364,  502, 364,  502, 364,  502, 364,  502, 364,  502, 364,  502, 364,  502, 364,  500, 1232,  502, 1230,  502, 1230,  502, 366,  500, 364,  530, 364,  502, 364,  502, 364,  502, 364,  502, 364,  502, 366,  500, 364,  502, 1228,  502, 1234,  502, 1232,  502, 362,  502, 364,  502, 364,  526, 340,  502, 364,  530, 364,  526, 340,  502, 364,  502, 364,  502, 364,  502, 364,  502, 364,  526, 340,  502, 364,  502, 364,  502, 364,  502, 1230,  502, 364,  502, 364,  528, 1204,  528, 364,  502, 364,  502, 364,  500, 1232,  502, 364,  500, 366,  502, 364,  502, 366,  500, 366,  500, 366,  500, 364,  502, 364,  502, 364,  500, 366,  530, 364,  502, 364,  500, 366,  500, 366,  502, 364,  500, 366,  500, 364,  502, 1232,  502, 1232,  502, 364,  500, 1232,  526, 1206,  502, 366,  502, 1230,  502, 49088,  82};  // UNKNOWN B09982E8
//auto-on
uint16_t rawDataAutoOn[441] = {130, 22840,  3564, 1664,  502, 364,  502, 1230,  502, 364,  502, 366,  524, 342,  502, 364,  502, 364,  502, 364,  502, 366,  500, 364,  528, 366,  500, 364,  502, 364,  502, 1230,  502, 364,  502, 364,  502, 366,  500, 366,  500, 366,  500, 364,  502, 364,  500, 1232,  502, 1230,  502, 1230,  502, 364,  528, 364,  500, 1232,  502, 364,  500, 364,  502, 364,  502, 364,  502, 366,  500, 364,  502, 364,  502, 364,  502, 364,  502, 364,  502, 364,  502, 364,  502, 364,  528, 364,  502, 364,  500, 366,  502, 364,  502, 366,  502, 364,  500, 364,  502, 364,  502, 364,  502, 364,  502, 364,  502, 364,  502, 364,  502, 364,  528, 364,  502, 366,  500, 364,  500, 1232,  502, 1232,  502, 364,  502, 364,  502, 364,  502, 364,  526, 340,  502, 9926,  3592, 1636,  502, 364,  502, 1230,  530, 364,  502, 364,  502, 364,  502, 364,  502, 364,  500, 364,  502, 364,  502, 366,  526, 340,  502, 364,  502, 364,  502, 1232,  502, 364,  502, 364,  528, 366,  502, 364,  502, 364,  526, 340,  502, 366,  502, 1230,  502, 1232,  502, 1232,  502, 364,  526, 340,  502, 1230,  502, 366,  502, 364,  502, 366,  500, 366,  500, 364,  528, 364,  502, 364,  502, 364,  502, 364,  502, 366,  500, 364,  502, 364,  502, 364,  500, 1232,  502, 364,  500, 366,  502, 1230,  502, 366,  502, 364,  528, 366,  500, 364,  502, 364,  502, 364,  502, 1230,  502, 364,  500, 1232,  502, 1230,  502, 366,  500, 364,  502, 364,  502, 364,  526, 340,  502, 364,  500, 366,  552, 340,  500, 366,  500, 1232,  502, 1230,  526, 1206,  528, 1206,  500, 1232,  502, 366,  500, 1230,  526, 340,  500, 1232,  502, 1232,  502, 366,  500, 1232,  502, 1232,  500, 366,  500, 366,  528, 366,  500, 366,  500, 366,  526, 340,  500, 366,  500, 366,  500, 366,  500, 366,  500, 366,  500, 366,  500, 366,  500, 1232,  500, 1232,  502, 1232,  500, 366,  552, 342,  500, 366,  500, 366,  500, 366,  498, 368,  502, 362,  500, 368,  498, 366,  500, 1234,  500, 1232,  500, 1232,  500, 366,  500, 366,  498, 368,  498, 368,  526, 368,  498, 368,  498, 366,  500, 366,  498, 368,  498, 368,  498, 368,  498, 368,  498, 368,  498, 368,  498, 368,  498, 370,  498, 1234,  498, 368,  498, 368,  526, 1234,  498, 368,  498, 368,  498, 368,  498, 1234,  498, 368,  498, 368,  498, 368,  498, 368,  498, 368,  496, 370,  498, 368,  498, 368,  498, 370,  496, 368,  524, 368,  498, 368,  496, 370,  496, 370,  496, 370,  496, 1236,  496, 370,  496, 1236,  498, 1236,  498, 368,  496, 1238,  496, 1236,  496, 1236,  496, 370,  496};  // UNKNOWN 85EF834F
//auto-off
uint16_t rawDataAutoOff[439] = {3532, 1696,  440, 426,  468, 1266,  440, 426,  464, 400,  466, 400,  462, 404,  466, 400,  466, 398,  468, 400,  468, 398,  494, 398,  468, 398,  468, 400,  466, 1266,  468, 398,  468, 398,  468, 398,  468, 400,  466, 398,  468, 398,  468, 400,  466, 1264,  468, 1264,  468, 1266,  468, 398,  496, 398,  468, 1266,  468, 398,  468, 398,  468, 398,  468, 400,  466, 398,  468, 398,  468, 398,  468, 398,  468, 398,  468, 400,  468, 398,  466, 398,  468, 398,  496, 398,  468, 398,  468, 398,  468, 398,  468, 400,  466, 398,  468, 398,  468, 398,  468, 398,  468, 398,  468, 398,  468, 398,  466, 400,  468, 398,  496, 396,  468, 398,  468, 398,  468, 1266,  468, 1264,  468, 400,  466, 400,  466, 398,  468, 398,  468, 398,  468, 9960,  3558, 1670,  468, 398,  468, 1264,  496, 398,  470, 396,  470, 396,  468, 398,  468, 398,  468, 398,  468, 396,  470, 398,  468, 398,  468, 396,  468, 398,  468, 1264,  470, 398,  468, 398,  496, 398,  468, 398,  468, 398,  468, 398,  468, 398,  470, 1264,  468, 1264,  468, 1264,  468, 398,  468, 396,  468, 1262,  472, 396,  468, 398,  468, 396,  468, 398,  468, 398,  496, 398,  468, 398,  468, 398,  468, 396,  470, 396,  470, 398,  468, 398,  468, 398,  468, 1264,  468, 398,  470, 396,  468, 1264,  470, 1264,  468, 1264,  470, 396,  496, 396,  470, 398,  470, 396,  468, 1264,  470, 396,  470, 1262,  470, 1264,  494, 372,  494, 372,  494, 372,  494, 372,  496, 370,  496, 370,  496, 370,  494, 372,  522, 370,  496, 1236,  496, 1236,  496, 1236,  496, 1236,  496, 1236,  498, 1236,  498, 1236,  498, 368,  498, 368,  498, 1236,  498, 368,  498, 1234,  498, 1234,  498, 368,  498, 368,  498, 366,  526, 368,  500, 366,  500, 366,  500, 366,  524, 342,  500, 368,  498, 366,  500, 366,  500, 366,  500, 366,  524, 1208,  500, 1234,  500, 1234,  500, 368,  498, 366,  528, 366,  500, 366,  500, 366,  500, 366,  500, 366,  500, 366,  500, 366,  500, 1234,  500, 1232,  500, 1232,  500, 366,  500, 366,  500, 366,  500, 366,  500, 366,  526, 366,  500, 366,  500, 366,  500, 366,  500, 366,  500, 366,  500, 366,  500, 366,  500, 366,  500, 366,  500, 366,  500, 1232,  502, 364,  500, 366,  526, 1206,  526, 368,  498, 366,  500, 366,  500, 1232,  500, 366,  500, 366,  500, 366,  500, 364,  500, 366,  500, 366,  500, 366,  500, 366,  500, 366,  500, 366,  526, 366,  500, 366,  500, 366,  500, 366,  500, 366,  500, 366,  500, 366,  500, 1232,  500, 1232,  500, 366,  500, 1232,  502, 1232,  500, 366,  500, 1232,  500};  // UNKNOWN 8E0E628

/*
 * Callback for Websocket events
 */
int WsCallback(uint8_t * payload, size_t length) {
	WsData wsdata = WsData(payload, length);
	Serial.printf("WsCallback payload=%s ssid=%s value=%s\n", payload, wsdata.getSSID().c_str(), wsdata.getValue().c_str());
	product.setValue(wsdata.getSSID(), 1-atoi(wsdata.getValue().c_str()));
	switch (product.getProperty(wsdata.getSSID()).index) {
			case TurnOff:
				irsend.sendRaw(rawDataOff, 447, 38);  // Send a raw data capture at 38kHz.
				Serial.println("a rawData capture from IRrecvDumpV2 rawDataOff");
		    	break;
		    case TurnOn:
		    	irsend.sendRaw(rawDataOn, 443, 38);  // Send a raw data capture at 38kHz.
				Serial.println("a rawData capture from IRrecvDumpV2 rawDataOn");
		    	break;
		    case AutoOn:
		    	irsend.sendRaw(rawDataAutoOn, 441, 38);  // Send a raw data capture at 38kHz.
				Serial.println("a rawData capture from IRrecvDumpV2 rawDataAutoOn");
				break;
		    case AutoOff:
		    	irsend.sendRaw(rawDataAutoOff, 439, 38);  // Send a raw data capture at 38kHz.
				Serial.println("a rawData capture from IRrecvDumpV2 rawDataAutoOff");
				break;
		    default:
		    	Serial.println("MyMqttcallback case default");
		    	break;
		}
	return 0;
}
/*
 * Callback for MQTT events
 */
attribStruct MyMqttCallback(attribStruct property, int scmd) {

	Serial.println("MyMqttcallback called");

	MqttUtil::product.setValue(property.ssid, scmd);
	MqttUtil::product.setDone(property.ssid);
	switch (MqttUtil::product.getProperty(property.ssid).index) {
		case TurnOff:
			irsend.sendRaw(rawDataOff, 447, 38);  // Send a raw data capture at 38kHz.
			Serial.println("a rawData capture from IRrecvDumpV2 rawDataOff");
	    	break;
	    case TurnOn:
	    	irsend.sendRaw(rawDataOn, 443, 38);  // Send a raw data capture at 38kHz.
			Serial.println("a rawData capture from IRrecvDumpV2 rawDataOn");
	    	break;
	    case AutoOn:
	    	irsend.sendRaw(rawDataAutoOn, 441, 38);  // Send a raw data capture at 38kHz.
			Serial.println("a rawData capture from IRrecvDumpV2 rawDataAutoOn");
			break;
	    case AutoOff:
	    	irsend.sendRaw(rawDataAutoOff, 439, 38);  // Send a raw data capture at 38kHz.
			Serial.println("a rawData capture from IRrecvDumpV2 rawDataAutoOff");
			break;
	    default:
	    	Serial.println("MyMqttcallback case default");
	    	break;
	}
	return (MqttUtil::product.getProperty(property.ssid));
}
void setup()
{
	Serial.begin(115200);
	irsend.begin();
	Serial.println("\n************START Symphony***************1");
	product.productType = "0014";
	product.room = "U7YY";  //salas
	product.name = "AC_Remote";
	product.addProperty(TurnOn, "0006", false, SymphProduct::createGui("AC", RADIO_OUT, "On", 0, 1, 1));
	product.addProperty(TurnOff, "0007", false, SymphProduct::createGui("AC", RADIO_OUT, "Off", 0, 1, 1));
	product.addProperty(AutoOn, "0008", false, SymphProduct::createGui("AT", RADIO_OUT, "Auto On", 0, 1, 1));
	product.addProperty(AutoOff, "0009", false, SymphProduct::createGui("AT", RADIO_OUT, "Auto Off", 0, 1, 1));
	s.setProduct(product);  //always set the product first before running the setup
	s.setWsCallback(&WsCallback);
	s.setMqttCallback(&MyMqttCallback);
	s.setup();
	Serial.println("************END***************");
}

void loop()
{
	s.loop();
	delay(200);
}
