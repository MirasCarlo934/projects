package bm.main;

import java.util.Iterator;
import java.util.List;

import org.springframework.boot.builder.SpringApplicationBuilder;
import org.springframework.context.ApplicationContext;
import org.springframework.context.ConfigurableApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

import bm.tools.BMCipher;

/**
 * The class that loads the filenames of the Spring Configuration files used by the BM.  
 * This is to make the configuration "dynamic".
 */
public class ConfigLoader {
	private ApplicationContext context;
    private List<String> configFiles;
    
    public ConfigLoader(List<String> configFiles) {
    		this.configFiles = configFiles;
    }
    
    public ConfigurableApplicationContext getContext() {
    		ConfigurableApplicationContext context = new ClassPathXmlApplicationContext(configFiles.toArray(
				new String[configFiles.size()]));
		return context;
    }

	/**
	 * Returns the ApplicationContext of this Maestro deployment.
	 * 
	 * @return the ApplicationContext
	 */
	public ApplicationContext getApplicationContext() {
		return context;
	}

	/**
	 * Sets the ApplicationContext of this Maestro deployment.
	 * 
	 * @param context the ApplicationContext to set
	 */
	public void setApplicationContext(ApplicationContext context) {
		this.context = context;
	}

//    /**
//     * @param bootContext the ApplicationContext generated by Spring Boot during startup
//     * @return Returns the ApplicationContext of the entire Maestro deployment
//     */
//    public ApplicationContext getConfig(ApplicationContext bootContext) {
//    		context = new ClassPathXmlApplicationContext(configFiles.toArray(new String[configFiles.size()]), 
//    				bootContext);
//    		return context;
//    }
////    public String[] getConfig() {
////    		context = new ClassPathXmlApplicationContext(configFiles.toArray(new String[configFiles.size()]));
////        String[] s = new String[configFiles.size()];
////        int count = 0;
////        for (Iterator<String> i = configFiles.iterator(); i.hasNext(); ) {
////            Object o = i.next();
////            s[count] = (String) o;
////            count++;
////        }
////        return s;
////    }
//    
//    /**
//     * @return Returns the configFiles.
//     */
//    public List<String> getConfigFiles() {
//        return configFiles;
//    }
//    /**
//     * @param configFiles The configFiles to set.
//     */
//    public void setConfigFiles(List<String> configFiles) {
//        this.configFiles = configFiles;
//    }
//    
//    public void addConfigFiles(String[] configFiles) {
//	    	for(int i = 0; i < configFiles.length; i++) {
//	    		this.configFiles.add(configFiles[i]);
//	    	}
//    }
//    
//    public ApplicationContext getApplicationContext() {
//    		if(context != null) {
//    			return context;
//    		} else {
//    			throw new NullPointerException("Application context not yet set in ConfigLoader!");
//    		}
//    }
//    
//    public void setApplicationContext(ApplicationContext context) {
//    		this.context = context;
//    }
}
